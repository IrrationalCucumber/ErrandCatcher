{"ast":null,"code":"import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\r\n * @name addMonths\r\n * @category Month Helpers\r\n * @summary Add the specified number of months to the given date.\r\n *\r\n * @description\r\n * Add the specified number of months to the given date.\r\n *\r\n * @param {Date|Number} date - the date to be changed\r\n * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\r\n * @returns {Date} the new date with the months added\r\n * @throws {TypeError} 2 arguments required\r\n *\r\n * @example\r\n * // Add 5 months to 1 September 2014:\r\n * const result = addMonths(new Date(2014, 8, 1), 5)\r\n * //=> Sun Feb 01 2015 00:00:00\r\n */\nexport default function addMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n  if (!amount) {\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n  var dayOfMonth = date.getDate();\n\n  // The JS Date object supports date math by accepting out-of-bounds values for\n  // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n  // want except that dates will wrap around the end of a month, meaning that\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n  // we'll default to the end of the desired month by adding 1 to the desired\n  // month and using a date of 0 to back up one day to the end of the desired\n  // month.\n  var endOfDesiredMonth = new Date(date.getTime());\n  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);\n  var daysInMonth = endOfDesiredMonth.getDate();\n  if (dayOfMonth >= daysInMonth) {\n    // If we're already at the end of the month, then this is the correct date\n    // and we're done.\n    return endOfDesiredMonth;\n  } else {\n    // Otherwise, we now know that setting the original day-of-month value won't\n    // cause an overflow, so set the desired day-of-month. Note that we can't\n    // just set the date of `endOfDesiredMonth` because that object may have had\n    // its time changed in the unusual case where where a DST transition was on\n    // the last day of the month and its local time was in the hour skipped or\n    // repeated next to a DST transition.  So we use `date` instead which is\n    // guaranteed to still have the original time.\n    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);\n    return date;\n  }\n}","map":{"version":3,"names":["toInteger","toDate","requiredArgs","addMonths","dirtyDate","dirtyAmount","arguments","date","amount","isNaN","Date","NaN","dayOfMonth","getDate","endOfDesiredMonth","getTime","setMonth","getMonth","daysInMonth","setFullYear","getFullYear"],"sources":["C:/Users/Princess Halina/Desktop/IT/082323/ErrandCatcher/client/node_modules/date-fns/esm/addMonths/index.js"],"sourcesContent":["import toInteger from \"../_lib/toInteger/index.js\";\r\nimport toDate from \"../toDate/index.js\";\r\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\r\n/**\r\n * @name addMonths\r\n * @category Month Helpers\r\n * @summary Add the specified number of months to the given date.\r\n *\r\n * @description\r\n * Add the specified number of months to the given date.\r\n *\r\n * @param {Date|Number} date - the date to be changed\r\n * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\r\n * @returns {Date} the new date with the months added\r\n * @throws {TypeError} 2 arguments required\r\n *\r\n * @example\r\n * // Add 5 months to 1 September 2014:\r\n * const result = addMonths(new Date(2014, 8, 1), 5)\r\n * //=> Sun Feb 01 2015 00:00:00\r\n */\r\nexport default function addMonths(dirtyDate, dirtyAmount) {\r\n  requiredArgs(2, arguments);\r\n  var date = toDate(dirtyDate);\r\n  var amount = toInteger(dirtyAmount);\r\n  if (isNaN(amount)) {\r\n    return new Date(NaN);\r\n  }\r\n  if (!amount) {\r\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\r\n    return date;\r\n  }\r\n  var dayOfMonth = date.getDate();\r\n\r\n  // The JS Date object supports date math by accepting out-of-bounds values for\r\n  // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and\r\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\r\n  // want except that dates will wrap around the end of a month, meaning that\r\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\r\n  // we'll default to the end of the desired month by adding 1 to the desired\r\n  // month and using a date of 0 to back up one day to the end of the desired\r\n  // month.\r\n  var endOfDesiredMonth = new Date(date.getTime());\r\n  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);\r\n  var daysInMonth = endOfDesiredMonth.getDate();\r\n  if (dayOfMonth >= daysInMonth) {\r\n    // If we're already at the end of the month, then this is the correct date\r\n    // and we're done.\r\n    return endOfDesiredMonth;\r\n  } else {\r\n    // Otherwise, we now know that setting the original day-of-month value won't\r\n    // cause an overflow, so set the desired day-of-month. Note that we can't\r\n    // just set the date of `endOfDesiredMonth` because that object may have had\r\n    // its time changed in the unusual case where where a DST transition was on\r\n    // the last day of the month and its local time was in the hour skipped or\r\n    // repeated next to a DST transition.  So we use `date` instead which is\r\n    // guaranteed to still have the original time.\r\n    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);\r\n    return date;\r\n  }\r\n}"],"mappings":"AAAA,OAAOA,SAAS,MAAM,4BAA4B;AAClD,OAAOC,MAAM,MAAM,oBAAoB;AACvC,OAAOC,YAAY,MAAM,+BAA+B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,SAASA,CAACC,SAAS,EAAEC,WAAW,EAAE;EACxDH,YAAY,CAAC,CAAC,EAAEI,SAAS,CAAC;EAC1B,IAAIC,IAAI,GAAGN,MAAM,CAACG,SAAS,CAAC;EAC5B,IAAII,MAAM,GAAGR,SAAS,CAACK,WAAW,CAAC;EACnC,IAAII,KAAK,CAACD,MAAM,CAAC,EAAE;IACjB,OAAO,IAAIE,IAAI,CAACC,GAAG,CAAC;EACtB;EACA,IAAI,CAACH,MAAM,EAAE;IACX;IACA,OAAOD,IAAI;EACb;EACA,IAAIK,UAAU,GAAGL,IAAI,CAACM,OAAO,CAAC,CAAC;;EAE/B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAIC,iBAAiB,GAAG,IAAIJ,IAAI,CAACH,IAAI,CAACQ,OAAO,CAAC,CAAC,CAAC;EAChDD,iBAAiB,CAACE,QAAQ,CAACT,IAAI,CAACU,QAAQ,CAAC,CAAC,GAAGT,MAAM,GAAG,CAAC,EAAE,CAAC,CAAC;EAC3D,IAAIU,WAAW,GAAGJ,iBAAiB,CAACD,OAAO,CAAC,CAAC;EAC7C,IAAID,UAAU,IAAIM,WAAW,EAAE;IAC7B;IACA;IACA,OAAOJ,iBAAiB;EAC1B,CAAC,MAAM;IACL;IACA;IACA;IACA;IACA;IACA;IACA;IACAP,IAAI,CAACY,WAAW,CAACL,iBAAiB,CAACM,WAAW,CAAC,CAAC,EAAEN,iBAAiB,CAACG,QAAQ,CAAC,CAAC,EAAEL,UAAU,CAAC;IAC3F,OAAOL,IAAI;EACb;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}