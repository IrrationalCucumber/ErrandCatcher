{"ast":null,"code":"import getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport startOfDay from \"../startOfDay/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_DAY = 86400000;\n\n/**\r\n * @name differenceInCalendarDays\r\n * @category Day Helpers\r\n * @summary Get the number of calendar days between the given dates.\r\n *\r\n * @description\r\n * Get the number of calendar days between the given dates. This means that the times are removed\r\n * from the dates and then the difference in days is calculated.\r\n *\r\n * @param {Date|Number} dateLeft - the later date\r\n * @param {Date|Number} dateRight - the earlier date\r\n * @returns {Number} the number of calendar days\r\n * @throws {TypeError} 2 arguments required\r\n *\r\n * @example\r\n * // How many calendar days are between\r\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\r\n * const result = differenceInCalendarDays(\r\n *   new Date(2012, 6, 2, 0, 0),\r\n *   new Date(2011, 6, 2, 23, 0)\r\n * )\r\n * //=> 366\r\n * // How many calendar days are between\r\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\r\n * const result = differenceInCalendarDays(\r\n *   new Date(2011, 6, 3, 0, 1),\r\n *   new Date(2011, 6, 2, 23, 59)\r\n * )\r\n * //=> 1\r\n */\nexport default function differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var startOfDayLeft = startOfDay(dirtyDateLeft);\n  var startOfDayRight = startOfDay(dirtyDateRight);\n  var timestampLeft = startOfDayLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfDayLeft);\n  var timestampRight = startOfDayRight.getTime() - getTimezoneOffsetInMilliseconds(startOfDayRight);\n\n  // Round the number of days to the nearest integer\n  // because the number of milliseconds in a day is not constant\n  // (e.g. it's different in the day of the daylight saving time clock shift)\n  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY);\n}","map":{"version":3,"names":["getTimezoneOffsetInMilliseconds","startOfDay","requiredArgs","MILLISECONDS_IN_DAY","differenceInCalendarDays","dirtyDateLeft","dirtyDateRight","arguments","startOfDayLeft","startOfDayRight","timestampLeft","getTime","timestampRight","Math","round"],"sources":["C:/Users/Princess Halina/Desktop/IT/082323/ErrandCatcher/client/node_modules/date-fns/esm/differenceInCalendarDays/index.js"],"sourcesContent":["import getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\r\nimport startOfDay from \"../startOfDay/index.js\";\r\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\r\nvar MILLISECONDS_IN_DAY = 86400000;\r\n\r\n/**\r\n * @name differenceInCalendarDays\r\n * @category Day Helpers\r\n * @summary Get the number of calendar days between the given dates.\r\n *\r\n * @description\r\n * Get the number of calendar days between the given dates. This means that the times are removed\r\n * from the dates and then the difference in days is calculated.\r\n *\r\n * @param {Date|Number} dateLeft - the later date\r\n * @param {Date|Number} dateRight - the earlier date\r\n * @returns {Number} the number of calendar days\r\n * @throws {TypeError} 2 arguments required\r\n *\r\n * @example\r\n * // How many calendar days are between\r\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\r\n * const result = differenceInCalendarDays(\r\n *   new Date(2012, 6, 2, 0, 0),\r\n *   new Date(2011, 6, 2, 23, 0)\r\n * )\r\n * //=> 366\r\n * // How many calendar days are between\r\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\r\n * const result = differenceInCalendarDays(\r\n *   new Date(2011, 6, 3, 0, 1),\r\n *   new Date(2011, 6, 2, 23, 59)\r\n * )\r\n * //=> 1\r\n */\r\nexport default function differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {\r\n  requiredArgs(2, arguments);\r\n  var startOfDayLeft = startOfDay(dirtyDateLeft);\r\n  var startOfDayRight = startOfDay(dirtyDateRight);\r\n  var timestampLeft = startOfDayLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfDayLeft);\r\n  var timestampRight = startOfDayRight.getTime() - getTimezoneOffsetInMilliseconds(startOfDayRight);\r\n\r\n  // Round the number of days to the nearest integer\r\n  // because the number of milliseconds in a day is not constant\r\n  // (e.g. it's different in the day of the daylight saving time clock shift)\r\n  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY);\r\n}"],"mappings":"AAAA,OAAOA,+BAA+B,MAAM,kDAAkD;AAC9F,OAAOC,UAAU,MAAM,wBAAwB;AAC/C,OAAOC,YAAY,MAAM,+BAA+B;AACxD,IAAIC,mBAAmB,GAAG,QAAQ;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,wBAAwBA,CAACC,aAAa,EAAEC,cAAc,EAAE;EAC9EJ,YAAY,CAAC,CAAC,EAAEK,SAAS,CAAC;EAC1B,IAAIC,cAAc,GAAGP,UAAU,CAACI,aAAa,CAAC;EAC9C,IAAII,eAAe,GAAGR,UAAU,CAACK,cAAc,CAAC;EAChD,IAAII,aAAa,GAAGF,cAAc,CAACG,OAAO,CAAC,CAAC,GAAGX,+BAA+B,CAACQ,cAAc,CAAC;EAC9F,IAAII,cAAc,GAAGH,eAAe,CAACE,OAAO,CAAC,CAAC,GAAGX,+BAA+B,CAACS,eAAe,CAAC;;EAEjG;EACA;EACA;EACA,OAAOI,IAAI,CAACC,KAAK,CAAC,CAACJ,aAAa,GAAGE,cAAc,IAAIT,mBAAmB,CAAC;AAC3E"},"metadata":{},"sourceType":"module","externalDependencies":[]}